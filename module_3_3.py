# 1.Функция с параметрами по умолчанию:
def print_params(a=1, b='строка', c=True):
    print(a, b, c)


#print_params(1, "string", False, 8, [1, 2, 3]) - вызов функции с добавлением дополнительных аргументов не возможен, т.к. изначально в функции задано только три параметра
#print_params(a=1, b="string", c=False, d=8, e=[1, 2, 3]) - аналогично предыдущему выводу
print_params() # - вызов функции без аргументов выводит значения, заданные параметрам по умолчанию при создании функции
print_params(b = 25) # - работает, т.к. произведено переназначение значения параметра "b"
print_params(c = [1,2,3]) # - аналогично предыдущему примеру. Значение параметра "с" было заменено на список

# 2.Распаковка параметров:
values_list = [7, "Стражник", False] #- список с тремя элементами разных типов.
values_dict = {"a": 7, "b": 'Windows', "c": False} #- словарь с тремя ключами, соответствующими параметрам функции и значениями разных типов.
print_params(*values_list) #- передача списка в функцию с распоковкой
print_params(**values_dict) #- передача словаря в функцию с распоковкой

# 3.Распаковка + отдельные параметры:
values_list_2 = [98.76, "Python"]
print_params(*values_list_2, 42) #- вызов функции работает, т.к. из списка распаковалось два параметра, плюс добавлен третий параментр ("42"), - что соответствует количеству параметров в функции
